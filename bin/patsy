#!/usr/bin/env node

"use strict";

/**
 * Require file system plugin from node
 *
 * @var     Object
 * @source  NodeJS
 */
var fs            = require('fs');
/**
 * Require util plugin from node
 *
 * @var     Object
 * @source  NodeJS
 */
var util          = require('util');

/**
 * Require path plugin from node
 *
 * @var     Object
 * @source  NodeJS
 */
var path          = require('path');

/**
 * Require colors plugin from node
 *
 * @var     Object
 * @source  NodeJS
 */
var program       = require('commander');

/**
 * Require commander
 *
 * @var     Object
 */
var program       = require('commander');

/**
 * Varholder for package.json
 *
 * @var     Object
 */
var pjson = require('../package.json');

var patsyHelpers = require('../lib/patsyHelpers');

var command = '';

var option  = '';

program
  .version(pjson.version)
  .option('-v, --verbose',        'output every log and debug statement from patsy. this will override the configuration setting!')
  .option('-d, --default-config', 'set patsy to just use the default configuration file')
  .option('-s, --scripture',      'no output from King Arthur, Patsy or God')
  .option('-D, --debug',          'set debug to true')
  .option('-nb, --no-build',      'start patsy without build system')
  .option('-np, --no-proxy',      'start patsy without proxy setup')
  .option('-nt, --no-test',       'start patsy without tests')
  .option('-nl, --no-linting',    'start patsy without linting')


program
  .command('test')
  .description('run a test of patsy')
  .action(function(){
    command = 'test';
    patsyHelpers.runPatsyTest();
  });

program
  .command('task [how]')
  .description('run patsy task(s). [all/<task>]')
  .action(function(how){

    command = 'task';
    patsyHelpers.runGruntTasks(how);
  });

program.parse(process.argv);



// If no commands are given, start patsy
if(command === ''){
  patsyHelpers.start();
}
